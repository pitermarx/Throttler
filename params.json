{"name":"Throttler","tagline":"A simple Throttle class that can throttle a method with the signature Action<List<T>>","body":"#### Project Setup\r\n\r\n_Includes a solution with a test project and the Throttle class_ \r\n\r\n#### License\r\n\r\nThe content of this project itself is licensed under the\r\n[Creative Commons Attribution 3.0 license](http://creativecommons.org/licenses/by/3.0/us/deed.en_US),\r\nand the underlying source code used to format and display that content\r\nis licensed under the [MIT license](http://opensource.org/licenses/mit-license.php).\r\n\r\n#### Example\r\n```cs\r\nAction<List<int>> actionToBeThrottled = () => /* Do awesome stuff */;\r\nvar maximumElementsBeforeFlush = 100;\r\nvar automaticFlushTimeout = TimeSpan.FromMinutes(5);\r\nvar throttledAction = new Throttler<int>(actionToBeThrottled, maximumElementsBeforeFlush, automaticFlushTimeout);\r\n\r\n// now, call the throttledAction\r\nthrottledAction.Call(new int());\r\nthrottledAction.Call(new List<int>(5));\r\n\r\n// you can flush manually to...\r\nthrottledAction.Flush();\r\n\r\n// if an exception occurs while calling the action, the OnError method is called\r\nthrottledAction.OnError = (exception, ints) =>\r\n    {\r\n        /* Example error handling\r\n        Log.Error(\"An error occurred while processing values\", exception);\r\n        DoFallbackAction(ints);\r\n        */\r\n    };\r\n```\r\n\r\n[![Build status](https://ci.appveyor.com/api/projects/status/ue5h2bp6sgtm23bx)](https://ci.appveyor.com/project/pitermarx/throttler)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}